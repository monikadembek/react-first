{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","allUsers","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filteredUsers","e","_this2","text","currentTarget","value","getFilteredUsersForText","then","setState","catch","err","console","log","Promise","resolve","time","Math","random","setTimeout","filter","user","toLowerCase","includes","react_default","a","createElement","onInput","filterUsers","bind","App_UsersList","users","Component","UsersList","_ref","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCIlCC,eAAW,CAAC,OAAQ,OAAQ,QAAS,SAAU,MAAO,SAEpDC,cACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,cAAeV,GAJLE,2EAUFS,GAAG,IAAAC,EAAAP,KACPQ,EAAOF,EAAEG,cAAcC,MACPV,KAAKW,wBAAwBH,GAClDI,KAAM,SAAAP,GAAa,OAAIE,EAAKM,SAAS,CAACR,oBACtCS,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,qDAGJP,GACtB,OAAO,IAAIU,QAAQ,SAAAC,GACjB,IAAMC,EAA6B,KAArBC,KAAKC,SAAW,GAC9BC,WAAW,WACT,IAAMlB,EAAgBV,EAAS6B,OAAO,SAAAC,GAAI,OAAIA,EAAKC,cAAcC,SAASnB,EAAKkB,iBAC/EP,EAAQd,IACPe,sCAKL,OACEQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,QAAS/B,KAAKgC,YAAYC,KAAKjC,QACtC4B,EAAAC,EAAAC,cAACI,EAAD,CAAWC,MAAOnC,KAAKI,MAAMC,wBAhCnB+B,aAsCZC,EAAY,SAAAC,GAAa,IAAXH,EAAWG,EAAXH,MAElB,OAAIA,EAAMI,OAAS,EAEfX,EAAAC,EAAAC,cAAA,UACGK,EAAMK,IAAI,SAAAf,GAAI,OAAIG,EAAAC,EAAAC,cAAA,MAAIW,IAAKhB,GAAOA,MAMvCG,EAAAC,EAAAC,cAAA,yBAKSlC,IChDK8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.ed0c7ee8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst allUsers = [\"John\", 'Jack', 'James', \"Jasper\", \"Jim\", \"Andy\"];\n\n  class App extends Component {\n    constructor() {\n      super();\n\n      this.state = {\n        filteredUsers: allUsers\n      };\n    }\n\n    //asynchronous option\n\n    filterUsers(e) {\n      const text = e.currentTarget.value;\n      const filteredUsers = this.getFilteredUsersForText(text)\n      .then( filteredUsers => this.setState({filteredUsers}))\n      .catch(err => console.log(err));\n    }\n\n    getFilteredUsersForText(text) {\n      return new Promise(resolve => {\n        const time = (Math.random() + 1) * 250;\n        setTimeout(() => {\n          const filteredUsers = allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()));\n          resolve(filteredUsers);\n        }, time) ;\n      });\n    }\n\n    render() {\n      return (\n        <div>\n          <input onInput={this.filterUsers.bind(this)}/>\n          <UsersList users={this.state.filteredUsers}/>\n        </div>\n      );\n    }\n  }\n\n  const UsersList = ({users}) => {\n    \n    if (users.length > 0) {\n      return (\n        <ul>\n          {users.map(user => <li key={user}>{user}</li>)}\n        </ul>\n      );\n    }\n\n    return (\n      <p>No results!</p>\n    );\n    \n  };  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}